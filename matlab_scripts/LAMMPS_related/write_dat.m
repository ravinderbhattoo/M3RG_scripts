function [] = write_dat(fd,format,info_atoms,box,coordinate,label,varargin)

% write_dat(fd,format,info_atoms,box,coordinate,label)
%
% 7/14/2016, Bu, add charge neutrality check
% Modified by Anoop
% fd is the file handle
% format can be 'atomic', 'charge', 'molecular', 'full', 'peri', and 'sphere'
% box is 3X3 matrix with size of x,y,z coor
% info_atom=[atom# mass charge vp/radius density
%             "     "      "    "    "   ];

if ~strcmp(format,'atomic') &&  ~strcmp(format,'charge') &&  ~strcmp(format,'molecular') &&  ~strcmp(format,'full') &&  ~strcmp(format,'peri') && ~strcmp(format,'sphere')
    error('Supported formats are: atomic, charge, molecular, full, peri, or sphere');
end
if (strcmp(format,'molecular') || strcmp(format,'full')) && length(varargin)<1
    error('Molecular and full format requires mol id array');
end

if box(1,2)~=0 || box(1,3)~=0 || box (2,3)~=0
    error('box(12),(13),(23) should be zero!');
end

if strcmp(format,'charge') || strcmp(format,'full')
    charge_label=label(:);
    for k=1:size(info_atoms,1)
        charge_label(charge_label==info_atoms(k,1))=info_atoms(k,3);
    end
    if sum(charge_label)>1e-7
        warning('charge not neutral! total charge=%6.2e',sum(charge_label));
    end
end
if strcmp(format,'peri')
    vp=label(:);
    density=label(:);
    for k=1:size(info_atoms,1)
        vp(vp==info_atoms(k,1))=info_atoms(k,4);
        density(density==info_atoms(k,1))=info_atoms(k,5);
    end
end

%info_atoms format for sphere is 
%info_atom=[atom# radius density
%             "     "      "    ];
if strcmp(format,'sphere')
    radius=label(:);
    density=label(:);
    for k=1:size(info_atoms,1)
        radius(radius==info_atoms(k,1))=info_atoms(k,2);
        density(density==info_atoms(k,1))=info_atoms(k,3);
    end
end

fprintf(fd,'Generated by write_dat\n\n%1.0f atoms\n',size(coordinate,1));
fprintf(fd,'%1.0f atom types\n',size(info_atoms,1));

if strcmp(format,'molecular') || strcmp(format,'full')
    if length(varargin)>=2
        fprintf(fd,'%1.0f bonds\n%1.0f bond types\n',size(varargin{2},1),length(unique(varargin{2}(:,1))));
    end
    if length(varargin)>=3
        fprintf(fd,'%1.0f angles\n%1.0f angle types\n',size(varargin{3},1),length(unique(varargin{3}(:,1))));
    end
end

fprintf(fd,'\n');
fprintf(fd,'%20.12e  %20.12e xlo xhi\n',0,box(1,1));
fprintf(fd,'%20.12e  %20.12e ylo yhi\n',0,box(2,2));
fprintf(fd,'%20.12e  %20.12e zlo zhi\n',0,box(3,3));

if abs(box(2,1))>1e-10 || abs(box(3,1))>1e-10 || abs(box(3,2))>1e-10
    fprintf(fd,'%20.12e  %20.12e  %20.12e xy xz yz\n',box(2,1),box(3,1),box(3,2));
end

if ~strcmp(format,'peri') || ~strcmp(format,'sphere') 
    fprintf(fd,'\nMasses\n\n');
    for j=1:size(info_atoms,1)
        fprintf(fd,'%2.0f%8.3f\n',info_atoms(j,1:2));
    end
end


if  strcmp(format,'atomic')
    fprintf(fd,'\nAtoms # atomic\n\n');
    for i=1:size(coordinate,1)
        fprintf(fd,'%3.0f  %3.0f  %20.12f %20.12f %20.12f\n',i,label(i),coordinate(i,:));
    end
elseif strcmp(format,'charge')
    fprintf(fd,'\nAtoms # charge\n\n');
    for i=1:size(coordinate,1)
        fprintf(fd,'%3.0f  %3.0f  %20.12f %20.12f %20.12f %20.12f\n',i,label(i),charge_label(i),coordinate(i,:));
    end
elseif strcmp(format,'molecular')
    fprintf(fd,'\nAtoms # molecular\n\n');
    for i=1:size(coordinate,1)
        fprintf(fd,'%3.0f  %3.0f  %3.0f %20.12f %20.12f %20.12f\n',i,varargin{1}(i),label(i),coordinate(i,:));
    end
    if length(varargin)>=2
        fprintf(fd,'\nBonds\n\n'); % write Bonds
        for i=1:size(varargin{2},1)
            fprintf(fd,'%1.0f  %1.0f  %1.0f %1.0f\n',i,varargin{2}(i,:));
        end
    end
    if length(varargin)>=3
        fprintf(fd,'\nAngles\n\n'); % write Angles
        for i=1:size(varargin{3},1)
            fprintf(fd,'%1.0f  %1.0f  %1.0f %1.0f %1.0f\n',i,varargin{3}(i,:));
        end
    end
elseif strcmp(format,'full')
    fprintf(fd,'\nAtoms # full\n\n');
    for i=1:size(coordinate,1)
        fprintf(fd,'%3.0f  %3.0f  %3.0f %20.12f %20.12f %20.12f %20.12f\n',i,varargin{1}(i),label(i),charge_label(i),coordinate(i,:));
    end
    if length(varargin)>=2
        fprintf(fd,'\nBonds\n\n'); % write Bonds
        for i=1:size(varargin{2},1)
            fprintf(fd,'%1.0f  %1.0f  %1.0f %1.0f\n',i,varargin{2}(i,:));
        end
    end
    if length(varargin)>=3
        fprintf(fd,'\nAngles\n\n'); % write Angles
        for i=1:size(varargin{3},1)
            fprintf(fd,'%1.0f  %1.0f  %1.0f %1.0f %1.0f\n',i,varargin{3}(i,:));
        end
    end
elseif strcmp(format,'peri')
    fprintf(fd,'\nAtoms # peri\n\n');
    for i=1:size(coordinate,1)
        fprintf(fd,'%3.0f  %3.0f %20.12e %20.12e %20.12e %20.12e %20.12e\n',i,label(i),vp(i),density(i),coordinate(i,:));
    end
elseif strcmp(format,'sphere')
    fprintf(fd,'\nAtoms # sphere\n\n');
    for i=1:size(coordinate,1)
        fprintf(fd,'%3.0f  %3.0f %20.12e %20.12e %20.12e %20.12e %20.12e\n',i,label(i),radius(i),density(i),coordinate(i,:));
    end
end

